scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(c(1,1,1,1), "cm"))
exmpl.plot
pdf("test.pdf", 6,2)
exmpl.plot
dev.off()
exmpl.plot <- ggplot(iv.df.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.25,
position = position_dodge2(width = dodge), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"))
exmpl.plot
pdf("test.pdf", 6,2)
exmpl.plot
dev.off()
l <- letters[rep(1:2, c(2,3))]
s <- c(1,3,2,4,9)
e <- c(5,9,6,8,12)
## Create example dataset 1
l <- letters[rep(1:2, c(2,3))]
s <- c(1,3,2,4,9)
e <- c(5,9,6,8,12)
exmpl.df1 <- data.frame(id = letters[rep(1:2, c(2,3))],
start = c(1,3,2,4,9),
end = c(5,9,6,8,12))
## Create example dataset 2
l <- letters[rep(3:4, c(3,2))]
s <- c(2,5,11,1,3)
e <- c(4,10,13,6,10)
exmpl.df2 <- data.frame(id = letters[rep(3:4, c(3,2))],
start = c(2,5,11,1,3),
stop = c(4,10,13,6,10))
union(exmpl.df1, exmpl.df2)
unionDFs(exmpl.df1, exmpl.df2, names(exmpl.df1), names(exmpl.df2))
##
library(states)
install.packages("states")
##
library(states)
polity
##
polity %>% filter(polity < -10)
##
test <- polity %>% mutate(polity = ifelse(polity < 10, NA, polity))
plotGroupedNAs(test, year)
library(viridis)
plotGroupedNAs(test, year)
plotGroupedNAs(test, ccode)
plotGroupedNAs(test, factor(ccode))
plotGroupedNAs(test, ccode)
rep(1990:2020, 3)
##
na.df <- data.frame(
id = rep(letters[1:10], each = length(1990:2020)),
year = rep(1990:2020, 10))
na.df
values <- 0:1000
values
na.df <- data.frame(
id = rep(letters[1:10], each = length(1990:2020)),
year = rep(1990:2020, 10),
var1 = sample(values))
sample(values)
sample
na.df <- data.frame(
id = rep(letters[1:10], each = length(1990:2020)),
year = rep(1990:2020, 10),
var1 = sample(values, replace = T))
values
na.df <- data.frame(
id = rep(letters[1:10], each = length(1990:2020)),
year = rep(1990:2020, 10),
var1 = sample(values, size = length(1990:2020)*10, replace = T))
na.df
values <- 0:1000
years <- 1990:2020
ids <- letters[1:10]
na.df <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = length(years) * length(ids)))
na.df
na.df <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = length(years) * length(ids)),
var2 = sample(values, size = length(years) * length(ids)),
var3 = sample(values, size = length(years) * length(ids)))
na.df
as.data.frame(lapply(df, function(cc) cc[ sample(c(TRUE, NA), prob = c(0.85, 0.15), size = length(cc), replace = TRUE) ]))
as.data.frame(lapply(na.df, function(cc) cc[ sample(c(TRUE, NA), prob = c(0.85, 0.15), size = length(cc), replace = TRUE) ]))
sample(TRUE, FALSE, size = nrow(na.df))
sample(TRUE, FALSE, size = nrow(na.df), replace = T)
sample(c(TRUE, FALSE), size = nrow(na.df), replace = T)
sample(c(TRUE, FALSE), size = nrow(na.df), replace = T, prob = c(0.9, 0.1))
sample(c(TRUE, FALSE), size = nrow(na.df), replace = T, prob = c(0.99, 0.01))
ifelse(sample(c(TRUE, FALSE), size = nrow(na.df), replace = T, prob = c(0.9, 0.1)), na.df$var1, NA)
na.df$var2 <- ifelse(sample(c(TRUE, FALSE), size = nrow(na.df), replace = T, prob = c(0.9, 0.1)), na.df$var2, NA)
na.df$var3 <- ifelse(sample(c(TRUE, FALSE), size = nrow(na.df), replace = T, prob = c(0.55, 0.45)), na.df$var3, NA)
na.df
plotGroupedNAs(na.df, year)
plotNAs(na.df)
plotGroupedNAs
## Split Intervals
exmpl.df.chop <- chopIntervals(exmpl.df1, "start", "end")
exmpl.df.chop
exmpl.df1
## Split Intervals
exmpl.df.chop <- chopIntervals(exmpl.df1, id, "start", "end")
exmpl.df.chop
exmpl.df1.full <- unionDFs(exmpl.df1, exmpl.df1.chop, names(exmpl.df1), names(exmpl.df1.chop))
unionDFs(exmpl.df1, exmpl.df2, names(exmpl.df1), names(exmpl.df2))
## Split Intervals
exmpl.df1.chop <- chopIntervals(exmpl.df1, id, "start", "end")
exmpl.df1$version <- "Before"
exmpl.df1.chop$version <- "After"
exmpl.df1.full <- unionDFs(exmpl.df1, exmpl.df1.chop, names(exmpl.df1), names(exmpl.df1.chop))
exmpl.df1.full
## Plot results
cols <- rev(viridis::viridis_pal(option="C")(3)[1:2])
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.25,
position = position_dodge2(width = dodge), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"))
exmpl.plot
pdf("chop_intervals_illustration.pdf", 6,2)
exmpl.plot
dev.off()
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.25,
position = position_dodge2(width = dodge), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
exmpl.plot
pdf("chop_intervals_illustration.pdf", 6,1.5)
exmpl.plot
dev.off()
pdf("chop_intervals_illustration.pdf", 6,2)
exmpl.plot
dev.off()
pdf("chop_intervals_illustration.pdf", 5.5,2)
exmpl.plot
dev.off()
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = dodge), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
pdf("chop_intervals_illustration.pdf", 5.5,2)
exmpl.plot
dev.off()
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
exmpl.plot
pdf("chop_intervals_illustration.pdf", 5.5,2)
exmpl.plot
dev.off()
plotNAs(na.df)
library(dprtools)
library(dprtools)
library(tidyverse)
setwd("~/Documents/ICR/github/dprtools/R")
################################################################################
## Create example datasets
################################################################################
## Create example dataset 1
l <- letters[rep(1:2, c(2,3))]
s <- c(1,3,2,4,9)
e <- c(5,9,6,8,12)
exmpl.df1 <- data.frame(id = letters[rep(1:2, c(2,3))],
start = c(1,3,2,4,9),
end = c(5,9,6,8,12))
## Create example dataset 2 (with non-matching names)
l <- letters[rep(3:4, c(3,2))]
s <- c(2,5,11,1,3)
e <- c(4,10,13,6,10)
exmpl.df2 <- data.frame(id = letters[rep(3:4, c(3,2))],
start = c(2,5,11,1,3),
stop = c(4,10,13,6,10))
## Union dfs
union(exmpl.df1, exmpl.df2)
unionDFs(exmpl.df1, exmpl.df2, names(exmpl.df1), names(exmpl.df2))
## Split Intervals
exmpl.df1.chop <- chopIntervals(exmpl.df1, id, "start", "end")
exmpl.df1$version <- "Before"
exmpl.df1.chop$version <- "After"
exmpl.df1.full <- unionDFs(exmpl.df1, exmpl.df1.chop, names(exmpl.df1), names(exmpl.df1.chop))
exmpl.df1.full
## Plot results
cols <- rev(viridis::viridis_pal(option="C")(3)[1:2])
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
plotNAs(na.df)
plotNAs
na.df
years <- 1990:2020
ids <- letters[1:10]
values <- 1:1000
out.len <- length(years) * length(ids)
sample(c(T, F), size = out.len, replace = T, prob = c(0.9, 0.1))
## Randomly set some values to NA
exmpl.df2$var <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), exmpl.df2$var, NA)
sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1))
## Randomly set some values to NA
exmpl.df2$var <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), ., NA)
## Randomly set some values to NA
exmpl.df2$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), exmpl.df2$var2, NA)
ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), exmpl.df2$var2, NA)
## Randomly set some values to NA
exmpl.df2$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), "a", NA)
ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), "a", NA)
exmpl.df3 <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = out.len, replace = T),
var2 = sample(values, size = out.len, replace = T),
var3 = sample(values, size = out.len, replace = T))
## Randomly set some values to NA
exmpl.df3$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), exmpl.df3$var2, NA)
exmpl.df3
exmpl.df3 <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = out.len, replace = T),
var2 = sample(values, size = out.len, replace = T),
var3 = sample(values, size = out.len, replace = T))
## Randomly set some values to NA
exmpl.df3$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), exmpl.df3$var2, NA)
exmpl.df3$var3 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.6, 0.4)), exmpl.df3$var3, NA)
## Generate series
generateSeries(exmpl.df1, "start", "end")
## Generate series
generateSeries(exmpl.df1, "start", "end", varname = "my_series")
## Generate series
generateSeries(exmpl.df1, "start", "end", varname = "my_series") %>% head()
plotNAs(exmpl.df3)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
reshape2::melt(., id.vars = "idv")
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "missing obs.") +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
plotGroupedNAs(na.df, year)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
reshape2::melt(., id.vars = "idv")
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "missing obs.") +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
##' Plot missing values in dataframe
##'
##' Returns a bar plot with missing values for each variable
##' @param data dataframe
##' @return \code{ggplot2} plot
##'
##' @export
##'
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
reshape2::melt(., id.vars = "idv")
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
reshape2::melt(., id.vars = "idv")
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
tidyr::gather(-idv)
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(-idv)
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "var", values_to = "value", cols = -idv)
p <- ggplot(na.count, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
##' Plot missing values in dataframe
##'
##' Returns a bar plot with missing values for each variable
##' @param data dataframe
##' @return \code{ggplot2} plot
##'
##' @export
##'
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.count <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "var", values_to = "value", cols = -idv)
p <- ggplot(na.count, aes(y = var, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
plotNAs <- function(data){
sumNAs <- function(x){sum(is.na(x))/length(x)}
na.share <- data %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "var", values_to = "value", cols = -idv)
p <- ggplot(na.share, aes(y = var, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotGroupedNAs(na.df, year)
plotNAs(exmpl.df3)
exmpl.df3
exmpl.df3 %>%
dplyr::summarize_all(1)
exmpl.df3 %>%
dplyr::summarize_all(length(x)/length(x))
exmpl.df3 %>%
dplyr::summarize_all(~function(x)length(x)/length(x))
exmpl.df3 %>%
dplyr::summarize_all(~function(x){length(x)/length(x)})
exmpl.df3 %>%
dplyr::summarize_all(function(x){length(x)/length(x)})
na.share <- exmpl.df3 %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
sumNAs <- function(x){sum(is.na(x))/length(x)}
plotNAs <- function(data){
na.share <- data %>%
dplyr::summarize_all(function(x){sum(is.na(x))/length(x)}) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
all.obs <- data %>%
dplyr::summarize_all(function(x){length(x)/length(x)})
p <- ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
na.share <- exmpl.df3 %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
all.obs <- data %>%
dplyr::summarize_all(function(x){length(x)/length(x)})
all.obs <- exmpl.df3 %>%
dplyr::summarize_all(function(x){length(x)/length(x)})
all.obs
exmpl.df3 %>%
dplyr::summarize_all(sumNAs) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
exmpl.df3 %>%
dplyr::summarize_all(function(x){length(x)/length(x)})
data <- exmpl.df3
na.share <- data %>%
dplyr::summarize_all(function(x){sum(is.na(x))/length(x)}) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
na.share
all.obs <- data.frame(names(data),
val = 1)
all.obs
all.obs <- data.frame(variable = names(data),
value = 1)
ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
geom_bar(data = all.obs, stat = identity, fill = NA, col = "black")
ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
geom_bar(data = all.obs, stat = "identity", fill = NA, col = "black")
ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
geom_bar(data = all.obs, stat = "identity", fill = NA, col = "black")
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
geom_bar(data = all.obs, stat = "identity", fill = NA, col = "black")
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
geom_bar(data = all.obs, stat = "identity", fill = NA, col = "black") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
geom_bar(data = all.obs, stat = "identity", fill = NA, col = "black") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_minimal()
plotNAs <- function(data){
na.share <- data %>%
dplyr::summarize_all(function(x){sum(is.na(x))/length(x)}) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
p <- ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "% missing obs.", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
plotNAs(exmpl.df3)
