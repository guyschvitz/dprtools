ids <- letters[1:10]
values <- 1:1000
out.len <- length(years) * length(ids)
my.df6 <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = out.len, replace = T),
var2 = sample(values, size = out.len, replace = T),
var3 = sample(values, size = out.len, replace = T))
## Randomly set some values to NA
my.df6$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), my.df6$var2, NA)
my.df6$var3 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.6, 0.4)), my.df6$var3, NA)
my.df6
## Plot NA's
plotNAs(my.df6)
##' Plot missing values in dataframe
##'
##' Returns a bar plot with missing values for each variable
##' @param data dataframe
##' @return \code{ggplot2} plot
##'
##' @export
##'
plotNAs <- function(data){
na.share <- data %>%
dplyr::summarize_all(function(x){sum(is.na(x))/length(x)}) %>%
mutate(idv = 1) %>%
pivot_longer(names_to = "variable", values_to = "value", cols = -idv)
p <- ggplot(na.share, aes(y = variable, x = value)) +
geom_bar(stat = "identity") +
scale_x_continuous(name = "share missing", breaks = seq(0, 1, 0.1), limits = c(0, 1)) +
theme_classic()
return(p)
}
## Plot NA's
plotNAs(my.df6)
pdf("plotNAs.pdf", 6,4)
plotNAs(my.df6)
dev.off()
setwd("~/Documents/ICR/github/dprtools/R")
pdf("plotNAs.pdf", 6,4)
plotNAs(my.df6)
dev.off()
pdf("../demo/plotNAs.pdf", 6,4)
plotNAs(my.df6)
dev.off()
pdf("../demo/plotNAs.pdf", 8,5)
plotNAs(my.df6)
dev.off()
## Plot NA's
pdf("../demo/plotNAs.pdf", 7,5)
plotNAs(my.df6)
dev.off()
set.seed(1999)
years <- 1990:2020
ids <- letters[1:10]
values <- 1:1000
out.len <- length(years) * length(ids)
my.df6 <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = out.len, replace = T),
var2 = sample(values, size = out.len, replace = T),
var3 = sample(values, size = out.len, replace = T))
## Randomly set some values to NA
my.df6$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), my.df6$var2, NA)
my.df6$var3 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.6, 0.4)), my.df6$var3, NA)
## Plot NA's
plotNAs(my.df6)
pdf("../demo/plotNAs.pdf", 7,5)
plotNAs(my.df6)
dev.off()
plotGroupedNAs(my.df6, year)
pdf("../demo/plotNAs.pdf", 7,5)
plotGroupedNAs(my.df6, year)
dev.off()
##' Plot missing values in dataframe by grouping variable
##'
##' Returns a tile plot with percentages of missing observations for each grouped variable
##'
##' @param data R data.frame or tibble
##' @param groupvar Variable to group missing observations by
##' @return \code{ggplot2} plot
##'
##' @export
##'
plotGroupedNAs <- function(data, groupvar){
## ... function: compute share of missing values
shareNAs <- function(x){sum(is.na(x)) / length(x)}
## ... Compute and plot share of missing values by grouping variable
q.groupvar <-  rlang::enquo(groupvar)
na.share <- data %>%
group_by(!!q.groupvar) %>%
dplyr::summarize_all(shareNAs) %>%
reshape2::melt(id.vars = quo_name(q.groupvar))
p <- ggplot(na.share, aes(x=!!q.groupvar, y=variable, fill=value)) +
theme_classic() +
geom_tile(alpha=0.8) +
viridis::scale_fill_viridis(name = "share missing") +
theme(axis.text.x = element_text(angle = 90),
axis.ticks.x = element_blank())
return(p)
}
plotGroupedNAs(my.df6, year)
plotGroupedNAs <- function(data, groupvar){
## ... function: compute share of missing values
shareNAs <- function(x){sum(is.na(x)) / length(x)}
## ... Compute and plot share of missing values by grouping variable
q.groupvar <-  rlang::enquo(groupvar)
na.share <- data %>%
group_by(!!q.groupvar) %>%
dplyr::summarize_all(shareNAs) %>%
reshape2::melt(id.vars = quo_name(q.groupvar))
p <- ggplot(na.share, aes(x=!!q.groupvar, y=variable, fill=value)) +
theme_classic() +
geom_tile(alpha=0.8) +
viridis::scale_fill_viridis(name = "share missing", limits = c(0,1)) +
theme(axis.text.x = element_text(angle = 90),
axis.ticks.x = element_blank())
return(p)
}
plotGroupedNAs(my.df6, year)
pdf("../demo/plotNAs.pdf", 7,5)
plotGroupedNAs(my.df6, year)
dev.off()
plotGroupedNAs(my.df6, year)
library(dprtools)
library(dprtools)
pdf("../demo/plotNAs.pdf", 7,5)
plotNAs(my.df6)
dev.off()
pdf("../demo/plotGroupedNAs.pdf", 7,5)
plotGroupedNAs(my.df6, year)
dev.off()
plotGroupedNAs(my.df6, year)
pdf("../demo/plotNAs.png", w=1000, h = 500, r = 200)
plotNAs(my.df6)
dev.off()
pdf("../demo/plotNAs.png", width=1000, height = 500, res = 200)
plotNAs(my.df6)
dev.off()
png("../demo/plotNAs.png", width=1000, height = 500, res = 200)
plotNAs(my.df6)
dev.off()
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
my.df.full <- unionDFs(my.df1, my.df2, names(my.df1), names(my.df2))
library(dprtools)
library(tidyverse)
setwd("~/Documents/ICR/github/dprtools/R")
################################################################################
## UnionDFs
################################################################################
## Create example datasets with non-matching names
my.df1 <- data.frame(id = letters[rep(1:2, c(2,3))],
start = c(1,3,2,4,9),
end = c(5,9,6,8,12))
my.df2 <- data.frame(id = letters[rep(3:4, c(3,2))],
start = c(2,5,11,1,3),
stop = c(4,10,13,6,10))
## If we try dplyr::union we get an error
dplyr::union(my.df1, my.df2)
# Error: not compatible:
#   not compatible:
#   - Cols in y but not x: `stop`.
# - Cols in x but not y: `end`.
## Instead, use dprtools::unionDFs
unionDFs(my.df1, my.df2, c("id", "start", "end"), c("id", "start", "stop"))
# id start end
# a     1   5
# a     3   9
# b     2   6
# b     4   8
# b     9  12
# c     2   4
# c     5  10
# c    11  13
# d     1   6
# d     3  10
################################################################################
## Generate series
################################################################################
## Create example dataset
my.df3 <- data.frame(id = letters[rep(1:2, c(2,3))],
start = c(1,5,1,4,9),
end = c(4,9,3,8,12))
## Expand into "series"
my.df3.out <- generateSeries(data = my.df3, start = "start", end = "end",
step = 1, varname = "my_series")
## Show first couple of rows
head(my.df3.out)
# id my_series
# a         1
# a         2
# a         3
# a         4
# a         5
# a         6
## This also works with dates, for example:
my.df4 <- data.frame(id = "Switzerland",
start = as.Date("1990-01-01"),
end = as.Date("2020-01-01"))
## Create yearly series
my.df4.out <- generateSeries(data = my.df4,
start = "start",
end = "end",
step = 1,
timeint = "year",
varname = "date")
## Preview results
head(exmpl.df4.out)
# id       date
# Switzerland 1990-01-01
# Switzerland 1991-01-01
# Switzerland 1992-01-01
# Switzerland 1993-01-01
# Switzerland 1994-01-01
# Switzerland 1995-01-01
################################################################################
## Chopintervals
################################################################################
## Recall first example dataframe with overlapping intervals
my.df1
# id start end
# a     1   5
# a     3   9
# b     2   6
# b     4   8
# b     9  12
## Chop into consecutive intervals
chopIntervals(data = my.df1, id = id, start.col = "start", end.col = "end")
# id    start   end
# a         1     2
# a         3     5
# a         6     9
# b         2     3
# b         4     6
# b         7     8
# b         9    12
## This also works with dates, for example:
my.df5 <- data.frame(id = rep("a", 3),
start = as.Date(c("1990-01-01", "1995-09-08", "1999-12-31")),
end = as.Date(c("1996-01-10", "2001-08-01", "2020-03-23")))
chopIntervals(my.df5, id = id, start.col = "start", end.col = "end")
# id    start      end
# a     1990-01-01 1995-09-07
# a     1995-09-08 1996-01-10
# a     1996-01-11 1999-12-30
# a     1999-12-31 2001-08-01
# a     2001-08-02 2020-03-23
## Create example dataset 3 (time series with random NAs)
set.seed(1999)
years <- 1990:2020
ids <- letters[1:10]
values <- 1:1000
out.len <- length(years) * length(ids)
my.df6 <- data.frame(id = rep(ids, each = length(years)),
year = rep(years, length(ids)),
var1 = sample(values, size = out.len, replace = T),
var2 = sample(values, size = out.len, replace = T),
var3 = sample(values, size = out.len, replace = T))
## Randomly set some values to NA
my.df6$var2 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.9, 0.1)), my.df6$var2, NA)
my.df6$var3 <- ifelse(sample(c(T, F), size = out.len,
replace = T, prob = c(0.6, 0.4)), my.df6$var3, NA)
## Plot NA's
plotNAs(my.df6)
png("../demo/plotNAs.png", width=1000, height = 500, res = 200)
plotNAs(my.df6)
dev.off()
pdf("../demo/plotGroupedNAs.pdf", 7,5)
plotGroupedNAs(my.df6, year)
dev.off()
################################################################################
## Demonstrate functions
################################################################################
## Union dfs
my.df.full <- unionDFs(my.df1, my.df2, names(my.df1), names(my.df2))
## Chop Intervals
my.df.full.chop <- chopIntervals(my.df.full, id, "start", "end")
## Union dfs
my.df.full <- unionDFs(my.df1, my.df2, names(my.df1), names(my.df2))
## Chop Intervals
my.df.full.chop <- chopIntervals(my.df.full, id, "start", "end")
exmpl.df1$version <- "Before"
exmpl.df1.chop$version <- "After"
exmpl.df1.full <- unionDFs(exmpl.df1, exmpl.df1.chop, names(exmpl.df1), names(exmpl.df1.chop))
## Plot results
cols <- rev(viridis::viridis_pal(option="C")(3)[1:2])
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
pdf("chop_intervals_illustration.png", 1000,500, 300)
exmpl.plot
dev.off()
my.df.full <- unionDFs(my.df1, my.df2, names(my.df1), names(my.df2))
exmpl.plot <- ggplot(exmpl.df1.full, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
## Union dfs
my.df.full <- unionDFs(my.df1, my.df2, names(my.df1), names(my.df2))
## Chop Intervals
my.df.full.chop <- chopIntervals(my.df.full, id, "start", "end")
my.df.full
my.df.full.chop <- chopIntervals(my.df.full, id, "start", "end")
my.df.full.chop
exmpl.df1$version <- "Before"
exmpl.df1.full <- unionDFs(my.df.full, my.df.full.chop, names(my.df.full), names(my.df.full.chop))
exmpl.df1.full
my.df.full.out <- unionDFs(my.df.full, my.df.full.chop, names(my.df.full), names(my.df.full.chop))
## Plot results
cols <- rev(viridis::viridis_pal(option="C")(3)[1:2])
exmpl.plot <- ggplot(my.df.full.out, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(iv.df$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
exmpl.plot <- ggplot(my.df.full.out, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df.full.out$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
exmpl.plot
ggplot(my.df.full.out, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8)
ggplot(my.df.full.out, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df.full.out$end))) +
coord_flip() +
theme_void()
my.df.full.out
my.df1
ggplot(my.df1, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df1$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
ggplot(my.df1, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df1$end)))
ggplot(my.df1, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df1$end))) +
coord_flip() +
theme_void()
my.df1.chop <- chopIntervals(my.df1, id, "start", "end")
my.df1.chop
## Chop Intervals
my.df1.chop <- chopIntervals(my.df1, id, "start", "end")
my.df1$version <- "Before"
my.df1.chop$version <- "After"
my.df1.out <- unionDFs(my.df1, my.df1.chop, names(my.df1), names(my.df1.chop))
my.df1.out
## Plot results
cols <- rev(viridis::viridis_pal(option="C")(3)[1:2])
exmpl.plot <- ggplot(my.df1, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df1$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
exmpl.plot
my.df1.chop
my.df1.out
ggplot(my.df1.out, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df1.out$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
exmpl.plot <- ggplot(my.df1.out, aes(x = fct_rev(id), y = end, col = fct_rev(id))) +
geom_errorbar(aes(ymin = start, ymax = end + 1), width = 0.3,
position = position_dodge2(width = 1), size = 0.8) +
scale_color_manual(values = cols, name = "id") +
scale_y_continuous(breaks = seq(1:max(my.df1.out$end))) +
coord_flip() +
theme_void() +
facet_wrap(vars(fct_rev(version))) +
guides(colour = guide_legend(reverse=T)) +
theme(plot.margin = unit(rep(0.5, 4), "cm"), legend.position = "none")
png("chop_intervals_illustration.png", 1000,500, 300)
exmpl.plot
dev.off()
png("demo/chop_intervals_illustration.png", width = 1000, height = 500, res = 300)
exmpl.plot
dev.off()
exmpl.plot
png("demo/chop_intervals_illustration.png", width = 1000, height = 500, res = 300)
exmpl.plot
dev.off()
png("demo/chop_intervals_illustration.png", width = 500, height = 200, res = 200)
exmpl.plot
dev.off()
setwd("~/Documents/ICR/github/dprtools/R")
png("demo/chop_intervals_illustration.png", width = 500, height = 200, res = 200)
exmpl.plot
dev.off()
list.files()
png("../demo/chop_intervals_illustration.png", width = 500, height = 200, res = 200)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1000,
height = 200, res = 200)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1000,
height = 300, res = 200)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1000,
height = 300, res = 150)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1000,
height = 400, res = 200)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1500,
height = 1000, res = 250)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1500,
height = 1000, res = 300)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 1500,
height = 800, res = 300)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 2000,
height = 800, res = 300)
exmpl.plot
dev.off()
png("../demo/plotNAs.png", width=2000, height = 900, res = 300)
plotNAs(my.df6)
dev.off()
png("../demo/plotNAs.png", width=2000, height = 1000, res = 300)
plotNAs(my.df6)
dev.off()
pdf("../demo/plotGroupedNAs.png", width=2000, height = 1000, res = 300)
plotGroupedNAs(my.df6, year)
dev.off()
png("../demo/plotGroupedNAs.png", width=2000, height = 1000, res = 300)
plotGroupedNAs(my.df6, year)
dev.off()
png("../demo/chop_intervals_illustration.png", width = 2000,
height = 800, res = 250)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 2000,
height = 800, res = 350)
exmpl.plot
dev.off()
png("../demo/chop_intervals_illustration.png", width = 2000,
height = 800, res = 400)
exmpl.plot
dev.off()
